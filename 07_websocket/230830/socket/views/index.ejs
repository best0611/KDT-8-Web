<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="/socket.io/socket.io.js"></script>
    <style>
      #body {
        position: relative;
        width: 100%;
        height: 70vh;
        background-color: aquamarine;
      }
      #chat {
        position: absolute;
        bottom: 0px;
        width: 100%;
        display: flex;
        justify-content: space-between;
      }
      #chat input {
        width: 80%;
      }
      .my-chat {
        display: flex;
        justify-content: end;
        padding: 2px 0px;
      }
      .my-chat p {
        margin: 0px;
        padding: 10px;
        margin-right: 10px;
        background-color: yellow;
        border-radius: 10px;
      }

      .other-chat {
        display: flex;
        justify-content: start;
        padding: 2px 0px;
      }
      .other-chat p {
        margin: 0px;
        padding: 10px;
        margin-left: 10px;
        background-color: white;
        border-radius: 10px;
      }
      .my-chat-dm {
        display: flex;
        justify-content: end;
        padding: 2px 0px;
      }
      .my-chat-dm p {
        margin: 0px;
        padding: 10px;
        margin-right: 10px;
        background-color: pink;
        border-radius: 10px;
      }

      .other-chat-dm {
        display: flex;
        justify-content: start;
        padding: 2px 0px;
      }
      .other-chat-dm p {
        margin: 0px;
        padding: 10px;
        margin-left: 10px;
        background-color: pink;
        border-radius: 10px;
      }
      .notice {
        text-align: center;
        opacity: 0.7;
        background-color: gray;
        width: 80%;
        margin: 0% 10%;
        border-radius: 20px;
      }
    </style>
    <title>Document</title>
  </head>
  <body>
    <div id="main">
      <form id="room">
        <input type="text" id="roomName" placeholder="채팅방 만들기" />
        <input type="text" id="userName" placeholder="사용자 이름 입력" />
        <button>만들기</button>
      </form>
      <ul id="lists"></ul>
    </div>
    <div id="body" hidden>
      <div id="msg"></div>
      <form id="chat">
        <select id="userList"></select>
        <input type="text" id="message" placeholder="메세지 입력" />
        <button>입력</button>
      </form>
    </div>

    <script>
      const socket = io();
      const roomForm = document.querySelector("#room");
      const chatForm = document.querySelector("#chat");
      const msg = document.querySelector("#msg");

      let myName;

      //룸리스트
      socket.on("roomList", (roomLists) => {
        console.log(roomLists);
        const lists = document.querySelector("#lists");
        lists.textContent = "";
        roomLists.forEach((roomList) => {
          const li = document.createElement("li");
          li.textContent = `${roomList} 와 닉네임 입력 후 입장`;
          lists.appendChild(li);
        });
      });

      //사용자 리스트
      socket.on("userList", (userLists) => {
        console.log(userLists);
        const lists = document.querySelector("#userList");
        lists.textContent = "";
        let options = `<option value="all">전체</option>`;
        // 객체 배열은 for of 문으로 돌릴 수 있음.
        // for (let key in userLists) {
        //   options += `<option value="${key}">${userLists[key]}</option>`;
        // }
        for (let i of userLists) {
          options += `<option value="${i.key}">${i.name}</option>`;
        }
        lists.innerHTML = options;
      });
      // 새로운 사용자 입장
      socket.on("notice", (notice) => {
        console.log(notice);
        const div = document.createElement("div");
        div.textContent = notice;
        div.classList.add("notice");
        msg.appendChild(div);
      });
      //메세지 띄우기
      socket.on("newMessage", (message, nick) => {
        console.log(message);
        const div = document.createElement("div");
        const p = document.createElement("p");
        if (myName === nick) {
          p.textContent = message;
          div.classList.add("my-chat");
        } else {
          p.textContent = `${nick}: ${message}`;
          div.classList.add("other-chat");
        }
        div.appendChild(p);
        msg.appendChild(div);
      });
      // DM
      socket.on("newMessageDM", (message, nick) => {
        const div = document.createElement("div");
        const p = document.createElement("p");
        if (myName === nick) {
          p.textContent = `(속닥속닥) ${message}`;
          div.classList.add("my-chat-dm");
        } else {
          p.textContent = `(속닥속닥) ${nick}: ${message}`;
          div.classList.add("other-chat-dm");
        }
        div.appendChild(p);
        msg.appendChild(div);
      });

      ///폼 이벤트
      roomForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const roomName = roomForm.querySelector("#roomName");
        const userName = roomForm.querySelector("#userName");
        if (roomName.value === "" || userName.value === "") {
          alert("방이름과 닉네임 적어주세요");
          return;
        }
        socket.emit("create", roomName.value, userName.value, () => {
          const main = document.querySelector("#main");
          const body = document.querySelector("#body");
          main.hidden = true;
          body.hidden = false;
          myName = userName.value;
        });
      });
      chatForm.addEventListener("submit", (e) => {
        e.preventDefault();
        const user = document.querySelector("#userList");
        const message = document.querySelector("#message");
        console.log(user.value);
        const msg = {
          nick: myName,
          user: user.value,
          message: message.value,
        };
        socket.emit("sendMessage", msg);

        message.value = "";
      });
    </script>
  </body>
</html>
